Description: quick fix for get the files in FHS locations
 That is, instead of in the same directory as the application itself, we
 now expect modules in /usr/lib/ARCH/nrcradiant/, arch-independent files
 in /usr/share/nrcradiant/, and home config in ~/.config/nrcradiant/.
 (TODO: this could use some cleanup/refactoring)

diff --git a/include/qerplugin.h b/include/qerplugin.h
index c8975ada..fa4c99c1 100644
--- a/include/qerplugin.h
+++ b/include/qerplugin.h
@@ -117,7 +117,7 @@ enum VIEWTYPE
 struct _QERFuncTable_1
 {
 	INTEGER_CONSTANT( Version, 1 );
-	STRING_CONSTANT( Name, "radiant" );
+	STRING_CONSTANT( Name, "nrcradiant" );
 
 	const char* ( *getEnginePath )( );
 	const char* ( *getLocalRcPath )( );
diff --git a/radiant/environment.cpp b/radiant/environment.cpp
index 66e449a4..98b6fd1b 100644
--- a/radiant/environment.cpp
+++ b/radiant/environment.cpp
@@ -257,11 +257,12 @@ void environment_init( int argc, char* argv[] ){
 		ASSERT_MESSAGE( !string_empty( app_filepath.c_str() ), "failed to deduce app path" );
 		// NOTE: we build app path with a trailing '/'
 		// it's a general convention in Radiant to have the slash at the end of directories
-		app_path = PathFilenameless( real );
+		//app_path = PathFilenameless( real );
+		app_path = "/usr/share/nrcradiant/";
 	}
 
 	if ( !portable_app_setup() ) {
-		home_path = StringOutputStream( 256 )( DirectoryCleaned( g_get_home_dir() ), ".netradiant/" ).c_str();
+		home_path = StringOutputStream( 256 )( DirectoryCleaned( g_get_home_dir() ), ".config/nrcradiant/" ).c_str();
 		Q_mkdir( home_path.c_str() );
 	}
 	gamedetect();
diff --git a/radiant/build.cpp b/radiant/build.cpp
index 9887221b..f1db1a40 100644
--- a/radiant/build.cpp
+++ b/radiant/build.cpp
@@ -259,7 +259,7 @@ public:
 		if ( !m_buffer.empty() ) {
 			m_tool.push_back( new VariableString( m_buffer.c_str() ) );
 			// q3map2 ExtraResoucePath hack
-			if( strstr( m_buffer.c_str(), "[RadiantPath]q3map2.[ExecutableType]" ) != nullptr // is q3map2
+			if( strstr( m_buffer.c_str(), "[RadiantPath]q3map2" ) != nullptr // is q3map2
 			 && strstr( m_buffer.c_str(), "[ExtraResoucePath]" ) == nullptr ){ // has no extra path right away (could have been added by this before)
 				m_tool.push_back( new VariableString( "[ExtraResoucePath]" ) );
 			}
--- a/radiant/main.cpp
+++ b/radiant/main.cpp
@@ -382,7 +382,7 @@ bool check_version(){
 	// let's leave it disabled in debug mode in any case
 	// http://zerowing.idsoftware.com/bugzilla/show_bug.cgi?id=431
 #ifndef _DEBUG
-#define CHECK_VERSION
+//#define CHECK_VERSION
 #endif
 #ifdef CHECK_VERSION
 	// locate and open RADIANT_MAJOR and RADIANT_MINOR
diff --git a/radiant/mainframe.cpp b/radiant/mainframe.cpp
index f974e9e4..cd3d4b62 100644
--- a/radiant/mainframe.cpp
+++ b/radiant/mainframe.cpp
@@ -371,12 +371,16 @@ const char* ExtraResourcePath_get(){
 
 // App Path
 
-CopiedString g_strAppPath;                 ///< holds the full path of the executable
+CopiedString g_strAppPath;                 ///< holds the path of the arch independent files
 
 const char* AppPath_get(){
 	return g_strAppPath.c_str();
 }
 
+const char* LibPath_get(){
+	return "/usr/lib/" RADIANT_EXECUTABLE "/nrcradiant/";
+}
+
 /// the path to the local rc-dir
 const char* LocalRcPath_get(){
 	static CopiedString rc_path;
@@ -621,7 +625,7 @@ void Radiant_detachGameToolsPathObserver( ModuleObserver& observer ){
 void Radiant_Initialise(){
 	GlobalModuleServer_Initialise();
 
-	Radiant_loadModulesFromRoot( AppPath_get() );
+	Radiant_loadModulesFromRoot( LibPath_get() );
 
 	Preferences_Load();
 
diff --git a/radiant/mainframe.h b/radiant/mainframe.h
index dd46ba58..0d7999df 100644
--- a/radiant/mainframe.h
+++ b/radiant/mainframe.h
@@ -192,6 +192,8 @@ const char* ExtraResourcePath_get();
 extern CopiedString g_strAppPath;
 const char* AppPath_get();
 
+const char* LibPath_get();
+
 extern CopiedString g_strSettingsPath;
 const char* SettingsPath_get();
 
diff --git a/radiant/map.cpp b/radiant/map.cpp
index 5884b29e..1536ba58 100644
--- a/radiant/map.cpp
+++ b/radiant/map.cpp
@@ -1699,7 +1699,7 @@ tryDecompile:
 	const char *type = GlobalRadiant().getGameDescriptionKeyValue( "q3map2_type" );
 	if ( path_extension_is( filename, "bsp" ) || path_extension_is( filename, "map" ) ) {
 		StringOutputStream str( 256 );
-		str << AppPath_get() << "q3map2." << RADIANT_EXECUTABLE;
+		str << LibPath_get() << "q3map2";
 		str << " -v -game " << ( ( type && *type ) ? type : "quake3" );
 		str << " -fs_basepath " << makeQuoted( EnginePath_get() );
 		str << " -fs_homepath " << makeQuoted( g_qeglobals.m_userEnginePath.c_str() );
@@ -2416,7 +2416,7 @@ void map_autocaulk_selected(){
 
 	{	// compile
 		StringOutputStream str( 256 );
-		str << AppPath_get() << "q3map2." << RADIANT_EXECUTABLE
+		str << LibPath_get() << "q3map2"
 		    << " -game quake3"
 		    << " -fs_basepath " << makeQuoted( EnginePath_get() )
 		    << " -fs_homepath " << makeQuoted( g_qeglobals.m_userEnginePath )
diff --git a/radiant/qe3.cpp b/radiant/qe3.cpp
index e3256eea..7cfb0a32 100644
--- a/radiant/qe3.cpp
+++ b/radiant/qe3.cpp
@@ -163,7 +163,7 @@ bool ConfirmModified( const char* title ){
 }
 
 void bsp_init(){
-	build_set_variable( "RadiantPath", AppPath_get() );
+	build_set_variable( "RadiantPath", LibPath_get() );
 	build_set_variable( "ExecutableType", RADIANT_EXECUTABLE );
 	build_set_variable( "EnginePath", EnginePath_get() );
 	build_set_variable( "UserEnginePath", g_qeglobals.m_userEnginePath.c_str() );
